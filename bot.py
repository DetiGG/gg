import logging
import asyncio
import random
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram import F
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from database import init_db,  add_user, get_all_users # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î
logging.basicConfig(level=logging.INFO)
active = True
storage = MemoryStorage()
API_TOKEN = '7253122649:AAF8HtdtVR9YBgG5ZmFGlN--9irY6uhmTNI'
bot = Bot(token=API_TOKEN)
dp = Dispatcher()
DEVELOPER_CHAT_ID = 5497020266

# –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_ids = set()
class Feedback(StatesGroup):
    waiting_for_feedback = State()

@dp.message(Command("feedback"))
async def feedback_command(message: types.Message, state: FSMContext):
    global active
    if not active:
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ –±–æ—Ç –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω
        return
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤.")
    await state.set_state(Feedback.waiting_for_feedback)

@dp.message(Command("chat_info"))
async def chat_info(message: types.Message):
    global active
    if not active:
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ –±–æ—Ç –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω
        return
    chat = message.chat
    await message.answer(f"–ù–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞: {chat.title} \n–¢–∏–ø —á–∞—Ç–∞: {chat.type}\n–í–∞—à –∞–π–¥–∏: {message.from_user.id}")
users_id = []

async def load_users():
    global users_id
    users_id = await get_all_users()  # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

@dp.message(Command("adminf_start"))
async def admin_stop_command(message: types.Message):
    if message.from_user.id == DEVELOPER_CHAT_ID:
        global active
        active = True
        for user_id in users_id:
            try:
                await bot.send_message(user_id, "–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
            except Exception as e:
                logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        logging.info("–ë–û–¢ –ó–ê–ü–£–©–ï–ù")
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –æ –≤—ã–¥–∞—á–µ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω—Ü–∏—è–º –∞–¥–º–∏–Ω–∞!")

@dp.message(Command("adminf_stop"))
async def admin_stop_command(message: types.Message):
    global active
    if not active:
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ –±–æ—Ç –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω
        return
    if message.from_user.id == DEVELOPER_CHAT_ID:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        for user_id in users_id:
            try:
                await bot.send_message(user_id, "–£—à—ë–ª –Ω–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ—Ä—ã–≤. –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã —Å –Ω–∞–º–∏!")
            except Exception as e:
                logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

        active = False
        while not active:
            logging.info("–ë–û–¢ –ì–û–¢–û–í –ö –¢–ï–•–û–ë–°–õ–£–ñ–ò–í–ê–ù–ò–Æ. –ó–ê–í–ï–†–®–ò–¢–ï –†–ê–ë–û–¢–£.")
            await asyncio.sleep(8)
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É (–æ –ø—Ä–æ–µ–∫—Ç–µ) –æ –≤—ã–¥–∞—á–µ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω—Ü–∏—è–º –∞–¥–º–∏–Ω–∞!")

@dp.message(F.text, Feedback.waiting_for_feedback)
async def feedback_response(message: types.Message, state: FSMContext):
    feedback_text = message.text.strip()

    if not feedback_text:
        await message.answer("–í–∞—à –æ—Ç–∑—ã–≤ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ —á—Ç–æ-—Ç–æ.")
        return

    await bot.send_message(DEVELOPER_CHAT_ID, f"–ù–æ–≤—ã–π –æ—Ç–∑—ã–≤ –æ—Ç {message.from_user.username}:\n{feedback_text}")
    await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤!")
    await state.clear()  # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è

WELCOME_TEXT = (
    "–ü—Ä–∏–≤–µ—Ç! –Ø —á–∞—Ç-–±–æ—Ç, —Ç–≤–æ–π —à–∫–æ–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫. –í–æ—Ç, —á—Ç–æ —è –º–æ–≥—É:\n"
    "1. –ù–∞—á–∞—Ç—å - –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–æ—Ç–æ–º.\n"
    "2. –ü–æ–º–æ—â—å - –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–∞–Ω–¥–∞—Ö –∏ —Ñ—É–Ω–∫—Ü–∏—è—Ö.\n"
    "3. –û –ø—Ä–æ–µ–∫—Ç–µ - —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ –ø—Ä–æ–µ–∫—Ç–µ (—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫, –ø–æ–¥–¥–µ—Ä–∂–∫–∞, —Ç–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è)"
)

def create_main_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ù–∞—á–∞—Ç—å"), KeyboardButton(text="–ü–æ–º–æ—â—å"), KeyboardButton(text="–û –ø—Ä–æ–µ–∫—Ç–µ")]
        ],
        resize_keyboard=True
    )

def create_action_keyboard():
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="–†–∞—Å–ø–∏—Å–∞–Ω–∏–µüìå", callback_data="action1"),
            InlineKeyboardButton(text="–ü–æ–º–æ—â—å —Å –¥–∑üí¨", callback_data="action2")
        ],
        [
            InlineKeyboardButton(text="–ö–ª—É–±—ã, —Å–µ–∫—Ü–∏–∏, –∫—Ä—É–∂–∫–∏üòé", callback_data="action3")
        ],
        [
            InlineKeyboardButton(text="–ö–∞–∫ –ø—Ä–æ–≤–µ—Å—Ç–∏ –¥–µ–Ω—å‚è∞?", callback_data="action4")
        ],
        [
            InlineKeyboardButton(text="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —à–∫–æ–ª–µüè´", callback_data="action5")
        ],
        [
            InlineKeyboardButton(text="–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ‚úÖ", callback_data="action6"),
            InlineKeyboardButton(text="–û–±—ä—è–≤–ª–µ–Ω–∏–µüì¢", callback_data="action7")
        ]
    ])
    return keyboard

main_keyboard = InlineKeyboardMarkup(inline_keyboard=[
    [
        InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="main_menu")
    ]
])

@dp.callback_query()
async def handle_callback(callback_query: types.CallbackQuery):
    global active
    if not active:
        return
    if callback_query.data == "action1":
        await callback_query.answer("–ò—â–µ–º –≤–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ...", show_alert=True)
        await bot.delete_message(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id)
        await asyncio.sleep(2.6)
        await callback_query.message.answer(text="–¢–ï–°–¢", reply_markup=main_keyboard)
    elif callback_query.data == "action2":
        await callback_query.answer("–°–µ–π—á–∞—Å —Ä–µ—à–∏–º –ø—Ä–æ–±–ª–µ–º—É)", show_alert=True)
        await bot.delete_message(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id)
        await asyncio.sleep(2.6)
        await callback_query.message.answer(text="–¢–ï–°–¢", reply_markup=main_keyboard)
    elif callback_query.data == "action3":
        await callback_query.answer("–ö—Ä—É—Ç–æ! –£–∂–µ –≥–æ—Ç–æ–≤–ª—é –æ—Ç–≤–µ—Ç)", show_alert=True)
        await bot.delete_message(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id)
        await asyncio.sleep(2.6)
        await callback_query.message.answer(text="–¢–ï–°–¢", reply_markup=main_keyboard)
    elif callback_query.data == "action4":
        await callback_query.answer("–°–µ–π—á–∞—Å —Ä–∞—Å—Å–∫–∞–∂—É!", show_alert=True)
        await bot.delete_message(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id)
        await asyncio.sleep(2.6)
        await callback_query.message.answer(text="–¢–ï–°–¢", reply_markup=main_keyboard)
    elif callback_query.data == "action5":
        await callback_query.answer("–ö–∞–∫–∞—è –∫–ª–∞—Å—Å–Ω–∞—è —à–∫–æ–ª–∞!", show_alert=True)
        await bot.delete_message(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id)
        await asyncio.sleep(2.6)
        await callback_query.message.answer(text="–¢–ï–°–¢", reply_markup=main_keyboard)
    elif callback_query.data == "main_menu":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ
        KEYBOARD1 = create_action_keyboard()
        await bot.edit_message_text(
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=KEYBOARD1
        )

@dp.message(Command("joke"))
async def joke_command(message: types.Message):
    global active
    if not active:
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ –±–æ—Ç –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω
        return
    jokes = [
        "–ü–æ—á–µ–º—É –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—ã –Ω–µ –ª—é–±—è—Ç –ø—Ä–∏—Ä–æ–¥—É? –ü–æ—Ç–æ–º—É —á—Ç–æ –≤ –Ω–µ–π —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –±–∞–≥–æ–≤.",
        "–ö–∞–∫–æ–π —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∞–º—ã–π –æ–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω—ã–π? Python, –ø–æ—Ç–æ–º—É —á—Ç–æ –æ–Ω –≤—Å–µ–≥–¥–∞ –¥–µ–ª–∞–µ—Ç —Ç–æ, —á—Ç–æ —Ç—ã –µ–º—É –≥–æ–≤–æ—Ä–∏—à—å.",
        "–ü–æ–∑–Ω–∞–∫–æ–º–∏–ª —Ä–æ–¥–∏—Ç–µ–ª–µ–π —Å–æ —Å–≤–æ–µ–π –¥–µ–≤—É—à–∫–æ–π. –û–Ω–∞ –∏–º —Å—Ä–∞–∑—É –ø–æ–Ω—Ä–∞–≤–∏–ª–∞—Å—å, —Ç–µ–ø–µ—Ä—å –æ—Ç–Ω–æ—Å—è—Ç—Å—è –∫ –Ω–µ–π, –∫–∞–∫ –∫ —Ä–æ–¥–Ω–æ–π –¥–æ—á–∫–µ ‚Äî –∏—â—É—Ç –µ–π –Ω–æ—Ä–º–∞–ª—å–Ω–æ–≥–æ –ø–∞—Ä–Ω—è.",
        "–°–∏–∂—É –Ω–∞ –¥–≤—É—Ö –¥–∏–µ—Ç–∞—Ö.. –û–¥–Ω–æ–π –Ω–µ –Ω–∞–µ–¥–∞—é—Å—å!",
        "–£—á—ë–Ω—ã–µ –Ω–∞—à–ª–∏ —á–µ—Ä–µ–ø–∞—Ö—É, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–æ–∂–∏–ª–∞ 300 –ª–µ—Ç. –ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ, —Å–∫–æ–ª—å–∫–æ –±—ã –µ—â—ë –æ–Ω–∞ –ø—Ä–æ–∂–∏–ª–∞, –µ—Å–ª–∏ –±—ã –µ—ë –Ω–µ –Ω–∞—à–ª–∏ —É—á—ë–Ω—ã–µ...",
        "–£ —á–∏–Ω–æ–≤–Ω–∏–∫–∞ –∏–∑ –¢–æ–º—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏ –Ω–∞—à–ª–∏ –ø–æ–¥–≤–∞–ª, –ø–æ–ª–Ω—ã–π –¥–µ–Ω–µ–≥. –û–Ω —Ö–æ—Ç–µ–ª —Ä–∞–∑–¥–∞—Ç—å –∏—Ö —Å–∏—Ä–æ—Ç–∞–º, –Ω–æ –Ω–µ —É—Å–ø–µ–ª –¥–æ –ø—Ä–∏—Ö–æ–¥–∞ –ø–æ–ª–∏—Ü–∏–∏.",
        "–ú–Ω–µ –±–∞—Ç—è —Å–∫–∞–∑–∞–ª –µ—Å–ª–∏ —è –µ—â–µ –±—É–¥—É –¥–æ–ª–≥–æ —Å–∏–¥–µ—Ç—å —É –∫–æ–º–ø–∞ –∏ –≤ —Ç–≥, –Ω–µ —Å–¥–µ–ª–∞–≤ —É—Ä–æ–∫–∏, —Ç–æ –æ–Ω –º–µ–Ω—è –º–æ—Ä–¥–æ–π –ø–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –≤–æ–∑–∏—Ç—å –±—É–¥–µ—Ç, –Ω–æ —è –Ω–µ –ª—ã–∫–æ–º —à–∏—Ç–ø—Ä–∞—É–µ–∫—Ä–æ–≥—Ä8–≥–æ–ø66–≥—à–∞–º–¥–∂–∑—â8–ø679—à–≥–ø–ø–ø–ø–≤—É–∫–Ω–ø–µ–∏—Ä—â–∑..",
        "–ü–æ—á–µ–º—É Java-–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—ã –Ω–µ –º–æ–≥—É—Ç –Ω–∞–π—Ç–∏ —Å–µ–±–µ –ø–∞—Ä—ã? –ü–æ—Ç–æ–º—É —á—Ç–æ –æ–Ω–∏ –≤—Å–µ–≥–¥–∞ —Ä–∞–±–æ—Ç–∞—é—Ç —Å –∫–ª–∞—Å—Å–∞–º–∏.",
        "–¢–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–π —á–µ–ª–æ–≤–µ–∫ –Ω–∞–π–¥—è –æ–¥–Ω—É –±—É—Ç—ã–ª–∫—É –≤–æ–¥–∫–∏ –∫—É–ø–∏—Ç –µ—â–µ‚Ä¶ –¥–≤–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–∑–¥–Ω–æ–≤–∞—Ç—å –Ω–∞—Ö–æ–¥–∫—É!"
    ]
    joke = random.choice(jokes)
    await message.answer(joke)

async def anim(message: types.Message, word: str):
    msg = await message.answer("–í")
    text = "–í"
    cp = 0
    for char in range(len(word)):
        await asyncio.sleep(0.08)

        if cp == 1:
            char += 1

        if cp == 2:
            char += 2
        if char == len(word):
            break
        if word[char] == " ":
            text += str(word[char]) + str(word[char + 1])
            cp += 1
        else:
            text += word[char]
        await msg.edit_text(text)
    await asyncio.sleep(0.6)

async def anim2(message: types.Message, word: str):
    msg = await message.answer("–†")
    text = "–†"
    cp = 0
    for char in range(len(word)):
        await asyncio.sleep(0.08)

        if cp == 1:
            char += 1

        if cp == 2:
            char += 2
        if char == len(word):
            break
        if word[char] == " ":
            text += str(word[char]) + str(word[char + 1])
            cp += 1
        else:
            text += word[char]
        await msg.edit_text(text)
    await asyncio.sleep(0.6)

async def anim3(message: types.Message, i: str):
    msg = await message.answer("–ü")
    text = "–ü"
    cp = 0
    for char in range(len(i)):
        await asyncio.sleep(0.08)
        if cp == 1:
            char += 1
        if cp == 2:
            char += 2
        if char == len(i):
            break
        if i[char] == " ":
            text += str(i[char]) + str(i[char + 1])
            cp += 1
        else:
            text += i[char]
        await msg.edit_text(text)
    await asyncio.sleep(0.6)
async def anim4(message: types.Message, i: str):
    msg = await message.answer("–¢")
    text = "–¢"
    cp = 0
    for char in range(len(i)):
        await asyncio.sleep(0.1)
        if cp == 1:
            char += 1
        if cp == 2:
            char += 2
        if char == len(i):
            break
        if i[char] == " ":
            text += str(i[char]) + str(i[char + 1])
            cp += 1
        else:
            text += i[char]
        await msg.edit_text(text)
    await asyncio.sleep(0.6)
@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    global active
    if not active:
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ –±–æ—Ç –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω
        return
    await add_user(message.from_user.id)  # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫
    await load_users()
    await state.clear()
    keyboard = create_main_keyboard()
    await message.answer(WELCOME_TEXT, reply_markup=keyboard)

@dp.message(F.text)
async def echo(message: types.Message):
    global active
    if not active:
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ –±–æ—Ç –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω
        return
    if message.text == "–ù–∞—á–∞—Ç—å":
        KEYBOARD = create_action_keyboard()
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=KEYBOARD)
    elif message.text == "–ü–æ–º–æ—â—å":
        await message.answer(
            "–í–æ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:\n"
            "/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
            "/feedback - –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤\n"
            "/chat_info - –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ\n"
            "/joke - –†–∞—Å—Å–∫–∞–∑–∞—Ç—å –∞–Ω–µ–∫–¥–æ—Ç \n"
            "/adminf_stop - –ê–î–ú–ò–ù–¢–ï–•–ü–ï–†–ï–†–´–í \n"
            "/adminf_start - –ê–î–ú–ò–ù–°–¢–ê–†–¢"
        )
    elif message.text == "–û –ø—Ä–æ–µ–∫—Ç–µ":
        await anim2(message, "–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: ZK-7 game")
        await anim3(message, "–æ–¥–¥–µ—Ä–∂–∫–∞ –±–æ—Ç–∞: @DeTiggg")
        await anim(message, "–µ—Ä—Å–∏—è: 1.5")
    elif message.text == "–ù–∞–∑–∞–¥":
        KEYBOARD = create_main_keyboard()
        await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=KEYBOARD)
    else:
        await message.answer("–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω–æ –∏–∑ –¥–µ–π—Å—Ç–≤–∏–π.")
async def on_startup():
    global active
    active = True
    await init_db()
    await load_users()  # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    global km
    km = True
    if km:
        await gold_func()
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
km = None
async def gold_func():
    for user_id in users_id:
        try:
            await bot.send_message(user_id, "–ë–æ—Ç —Å–Ω–æ–≤–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        except Exception as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
ck = None
async def gold_func2():
    for user_id in users_id:
        try:
            await bot.send_message(user_id, "–ë–æ—Ç –æ—Ç–∫–ª—é—á—ë–Ω")
        except Exception as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
async def on_shutdown():
    ck = True
    if ck:
        await gold_func2()
    logging.info("–ë–æ—Ç –æ—Ç–∫–ª—é—á–µ–Ω")  # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –±–æ—Ç–∞
is_bot_active = False
if __name__ == '__main__':
    async def main():
        await on_startup(skip_updates=True)
        try:
            await dp.start_polling(bot,skip_updates=True)
        finally:
            await on_shutdown()
    asyncio.run(main())
